generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  uid          String     @unique @default(uuid())
  name         String?
  phone        String?
  whatsapp     String?
  profile_link String?
  role         Roles      @default(corporate)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  is_active    Boolean    @default(true)
  corporate    Corporate?
  advisor      Advisor?
  agent        Agent?
  sm           SM?
}

model Corporate {
  user           User      @relation(fields: [userId], references: [uid])
  userId         String    @unique
  corporate_name String
  corporate_logo String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  advisors       Advisor[]
  agents         Agent[]
  sms            SM[]
  products       Product[]

  @@id([userId])
}

model Advisor {
  user            User      @relation(fields: [userId], references: [uid])
  userId          String    @unique
  corporate       Corporate @relation(fields: [corporateUserId], references: [userId])
  corporateUserId String
  advisor_name    String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  agents          Agent[]

  @@id([userId])
}

model Agent {
  user            User      @relation(fields: [userId], references: [uid])
  userId          String    @unique
  corporate       Corporate @relation(fields: [corporateUserId], references: [userId])
  corporateUserId String
  advisor         Advisor   @relation(fields: [advisorUserId], references: [userId])
  advisorUserId   String
  agent_name      String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@id([userId])
}

model SM {
  user            User      @relation(fields: [userId], references: [uid])
  userId          String    @unique
  corporate       Corporate @relation(fields: [corporateUserId], references: [userId])
  corporateUserId String

  @@id([userId])
}

model Application {
  id                 Int               @id @default(autoincrement())
  application_status ApplicationStatus @default(active)
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  product            Product           @relation(fields: [productId], references: [id])
  productId          Int
  customer           Customer          @relation(fields: [customerId], references: [id])
  customerId         Int
  timelines          Timeline[]
}

model Timeline {
  id            Int                @id @default(autoincrement())
  Application   Application        @relation(fields: [applicationId], references: [id])
  applicationId Int
  created_at    DateTime           @default(now())
  notes         String?
  loan_id       String?
  amount        BigInt?
  stage         ApplicationStatus?
}

model Customer {
  id          Int           @id @default(autoincrement())
  application Application[]
  name        String?
  pan         String        @unique
  phone       String
  email       String?
  pincode     String
}

model Product {
  id              Int           @id @default(autoincrement())
  product_name    String
  logo            String?
  product_link    String
  product_type    ProductTypes  @default(business_loan)
  product_status  Status        @default(active)
  payout          Decimal
  is_live         Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  applications    Application[]
  corporate       Corporate     @relation(fields: [corporateUserId], references: [userId])
  corporateUserId String
}

enum ProductTypes {
  business_loan
  insta_loan
}

enum ApplicationStatus {
  // todo
  active
  deactive
  expired
}

enum Status {
  active
  deactive
  expired
}

enum Roles {
  credsea
  corporate
  agency
  agents // agents
  sm
}
